import Flynn
import Foundation
import Socket

extension Picaroon {
    open class UserSession: Actor {
        // In Picaroon, a user sessions encapsulates on browser's "session" with the server. So when
        // the clinet connects for the very first time, a unique user session is created and assigned
        // to the connection. A cookie is used to store the user session uuid, so it is for multiple
        // connections to utilize the same user session.

        // UserSessions are intented to be subclassed by the application code

        public let unsafeSessionUUID: String = UUID().uuidString

        required public override init() {
            super.init()
        }

        open func safeHandleRequest(_ connection: AnyConnection, _ httpRequest: HttpRequest) {
            connection.beSendInternalError()
        }

        private func _beHandleRequest(_ connection: AnyConnection, _ httpRequest: Picaroon.HttpRequest) {
            safeHandleRequest(connection, httpRequest)
        }
    }
}

// MARK: - Autogenerated by FlynnLint
// Contents of file after this marker will be overwritten as needed

extension Picaroon.UserSession {

    @discardableResult
    public func beHandleRequest(_ connection: AnyConnection, _ httpRequest: Picaroon.HttpRequest) -> Self {
        unsafeSend { self._beHandleRequest(connection, httpRequest) }
        return self
    }

}
