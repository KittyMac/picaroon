import Flynn
import Foundation
import Socket

open class UserSession: Actor, Equatable {
    // In Picaroon, a user sessions encapsulates on browser's "session" with the server. So when
    // the clinet connects for the very first time, a unique user session is created and assigned
    // to the connection. A cookie is used to store the user session uuid, so it is for multiple
    // connections to utilize the same user session.

    // UserSessions are intented to be subclassed by the application code

    public static func == (lhs: UserSession, rhs: UserSession) -> Bool {
        return lhs.unsafeSessionUUID == rhs.unsafeSessionUUID
    }

    public let unsafeSessionUUID: String = UUID().uuidString

    required public override init() {
        super.init()
    }

    open func safeHandleRequest(_ connection: AnyConnection, _ httpRequest: HttpRequest) {
        connection.beSendInternalError()
    }

    private func _beHandleRequest(_ connection: AnyConnection, _ httpRequest: HttpRequest) {
        safeHandleRequest(connection, httpRequest)
    }
}

// MARK: - Autogenerated by FlynnLint
// Contents of file after this marker will be overwritten as needed

extension UserSession {

    @discardableResult
    public func beHandleRequest(_ connection: AnyConnection,
                                _ httpRequest: HttpRequest) -> Self {
        unsafeSend { self._beHandleRequest(connection, httpRequest) }
        return self
    }

}
